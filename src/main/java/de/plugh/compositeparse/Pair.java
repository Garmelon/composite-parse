package de.plugh.compositeparse;

/**
 * A {@link Pair} is an immutable class representing a tuple with two elements.
 *
 * @param <A> type of the first element
 * @param <B> type of the second element
 */
public class Pair<A, B> {

    private final A first;
    private final B second;

    /**
     * Create a new {@link Pair} from two elements.
     *
     * @param first  the first element
     * @param second the second element
     */
    public Pair(A first, B second) {
        this.first = first;
        this.second = second;
    }

    /**
     * @return the first element
     */
    public A getFirst() {
        return first;
    }

    /**
     * @return the second element
     */
    public B getSecond() {
        return second;
    }

    @Override
    public int hashCode() {
        // Auto-generated by eclipse
        final int prime = 31;
        int result = 1;
        result = prime * result + ((first == null) ? 0 : first.hashCode());
        result = prime * result + ((second == null) ? 0 : second.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        // Auto-generated by eclipse, with small changes
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        Pair<?, ?> other = (Pair<?, ?>) obj;
        if (first == null) {
            if (other.first != null) return false;
        } else if (!first.equals(other.first)) return false;
        if (second == null) {
            return other.second == null;
        } else return second.equals(other.second);
    }

}
